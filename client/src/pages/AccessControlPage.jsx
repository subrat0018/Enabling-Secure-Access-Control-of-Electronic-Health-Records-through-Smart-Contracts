// AccessControlPage.jsx
import React, { useEffect, useState } from "react";
import { useContext } from "react";
import Web3Context from "../contexts";
import { getOrgData,getPatientSpecificUri } from "../contexts/useContract/readContract";
import { grantAccess, revokeAccess } from "../contexts/useContract/writeContract";
import { useNavigate } from "react-router-dom";
import axios from"axios"
import lighthouse from "@lighthouse-web3/sdk"

const AccessControlPage = () => {
  const navigate = useNavigate();
  const { account, _PatientOrgContract } = useContext(Web3Context);
  const [access, setAccess] = useState("");
  const [organizationsData, setOrganizationsData] = useState();

  const [organizations, setOrganizations] = useState();
  const [isAccessKeyValid, setIsAccessKeyValid] = useState(false);
  const[signerMessage,setsignerMessage] = useState();
  async function resolve() {
    const res = await getOrgData(_PatientOrgContract, account.currentAccount);
    setOrganizationsData(res);
    // console.log("Hi", typeof organizationsData);
  }
  useEffect(()=>{
    axios.get(
      `https://encryption.lighthouse.storage/api/message/${account.currentAccount}`
   ).then(res=>setsignerMessage(res.data[0].message))
   //setsignerMessage(res.data[0])
  },[account])
  useEffect(() => {
    resolve();
  }, [_PatientOrgContract]);
//https://encryption.lighthouse.storage/api/message/<walletAddress>

const signAuthMessage = async () => {
  if (window.ethereum) {
  
    try {

     // axios.get(https://encryption.lighthouse.storage/api/message/<walletAddress>)

      const accounts = await window.ethereum.request({
        method: "eth_requestAccounts",
      })
      if (accounts.length === 0) {
        throw new Error("No accounts returned from Wallet.")
      }
      const signerAddress = accounts[0]
      // const { message } = (await lighthouse.getAuthMessage(signerAddress)).data
      const signature = await window.ethereum.request({
        method: "personal_sign",
        params: [signerMessage, signerAddress],
      })
      return { signature, signerAddress }
    } catch (error) {
      console.error("Error signing message with Wallet", error)
      return null
    }
  } else {
    console.log("Please install Wallet!")
    return null
  }
}

const shareFile = async (dataType,userB) => {
  try {
    // CID of the encrypted file that you want to share
    // CID is generated by uploading a file with encryption
    // Only the owner of the file can share it with another wallet address
    const encryptionAuth = await signAuthMessage()
    if (!encryptionAuth) {
      console.error("Failed to sign the message.")
      return
    }
    const res = await getPatientSpecificUri(_PatientOrgContract, dataType, account.currentAccount, account.currentAccount);
    const { signature, signerAddress } = encryptionAuth
    const cid = res // Example: "Qma7Na9sEdeM6aQeu6bUFW54HktNnW2k8g226VunXBhrn7";
    const publicKey = signerAddress // Example: "0xa3c960b3ba29367ecbcaf1430452c6cd7516f588";
    const signedMessage = signature
    const publicKeyUserB = [userB] //Example: 0x487fc2fE07c593EAb555729c3DD6dF85020B5160
    console.log(   publicKey,
      publicKeyUserB[0],
      cid,
      signedMessage)
    const shareResponse = await lighthouse.shareFile(
      publicKey,
      publicKeyUserB,
      cid,
      signedMessage
    )

    console.log(shareResponse)
    /* Sample Response
      {
        data: {
          cid: 'QmTsC1UxihvZYBcrA36DGpikiyR8ShosCcygKojHVdjpGd',
          shareTo: [ '0x487fc2fE07c593EAb555729c3DD6dF85020B5160' ],
          status: 'Success'
        }
      }
    */
  } catch (error) {
    console.log(error)
  }
}

// shareFile()
  const handleSaveAccess = () => {
    // Implement logic to save the granted access
    console.log("Saving access:", organizations);
  };

  return (
    <div className="container mx-auto p-8">
      <h1 className="text-3xl font-bold mb-4">Access Control</h1>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {organizationsData &&
          organizationsData.map((organization) => (
            <div key={organization.id} className="bg-gray-200 p-4 rounded-md">
              <h2 className="text-lg font-bold mb-2">
                {organization.name}
              </h2>
              <h2 className="text-lg mb-2">
                {organization.orgAddress}
              </h2>
              <p className="mb-2 font-bold">Granted Access:</p>
              <ul>
                {organization.hasAccess &&
                  organization.hasAccess.map((access) => {
                    return access.hasAccess ? (
                      <div className="flex justify-between"><li key={access}>{access.dataType}</li><button
                      type="button"
                      class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800"
                      onClick={async (e) => {
                        e.preventDefault();
                        await revokeAccess(
                          _PatientOrgContract,
                          account.currentAccount,
                          organization.orgAddress,
                          access.dataType
                        );
                        setAccess("");
                        alert("Access Revoked");
                        window.location.reload();
                      }}
                    >
                      Revoke
                    </button></div>
                    ) : (
                      ""
                    );
                  })}
                
              </ul>
              <div className="mt-4">
                <p className="font-bold mb-2">Available Access Controls:</p>
                <ul>
                {organization.hasAccess &&
                  organization.hasAccess.map((access) => {
                    return access.hasAccess ? (
                      ""
                    ):(
                      <div className="flex justify-between"><li key={access}>{access.dataType}</li><button
                      type="button"
                      class="focus:outline-none text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800"
                      onClick={async (e) => {
                        e.preventDefault();
                        await shareFile(access.dataType,organization.orgAddress)
                        await grantAccess(
                          _PatientOrgContract,
                          account.currentAccount,
                          organization.orgAddress,
                          access.dataType
                        );
                        setAccess("");
                        alert("Access Granted");
                        window.location.reload();
                      }}
                    >
                      Grant
                    </button></div>
                    ) ;
                  })}
                
              </ul>
              </div>
            </div>
          ))}
      </div>
{/* 
      <div className="mt-8 flex justify-end">
        <button
          className={`bg-blue-500 text-white py-2 px-4 rounded-md ${
            isAccessKeyValid ? "" : "cursor-not-allowed"
          }`}
          onClick={handleSaveAccess}
          disabled={!isAccessKeyValid}
        >
          Save
        </button>
      </div> */}
    </div>
  );
};

export default AccessControlPage;
